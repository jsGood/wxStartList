<style lang="less">
.bg{ width: 100%; display: block; display: none; }
.shareimgbox{
  position: absolute;
  width: 100%;
  height: 100%;
  canvas{ width: 100%; height: 100%; overflow: auto; }
}

.btns{
  display: none;
  box-sizing: border-box;
  position: fixed;
  z-index: 200;
  left: 0;
  bottom: 40rpx;
  width: 100%;
  padding: 0 20%;
  .btn{
    margin-top: 40rpx;
  }
}
</style>

<template>

  <view class="shareimgbox">
    <canvas canvas-id="shareCanvas" @longpress="longpressSaveImg" style='height:{{canvasHeight}}px'></canvas>
    <cover-view class="btns">
        <button class="btn" @tap="previewImage">预览</button>
        <button class="btn" @tap="saveImg">保存到相册</button>
    </cover-view>
  </view>

<!--   <view class="btns">
    <button class="btn" @tap="previewImage">预览</button>
    <button class="btn" @tap="saveImg">保存到相册</button>
  </view> -->

  <!-- <image mode='widthFix' class="bg" src="../images/template1.png" @longpress="longpressSaveImg"/> -->
</template>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import {util} from '../js/util'

  export default class InviteFriend extends wepy.page {
    config = {
      navigationBarTitleText: '邀请好友',
      navigationBarBackgroundColor: '#FB5488',
    }

    data = {
        screenWidth: '',
        screenHeight: '',
        canvasHeight: '',
    }

    methods = {
        //长按保存图片
        longpressSaveImg(){
          console.log(0);
          wx.showActionSheet({
            itemList: ['预览','保存'],
            success: res=>{
              if (res.tapIndex == 0) {
                this.previewImage();
              }
              if (res.tapIndex == 1) {
                this.saveImg();
              }
            }
          });
        },
    }

    //预览图片
    previewImage(){
        wx.canvasToTempFilePath({
            canvasId: 'shareCanvas',
            success: res=>{
                console.log(res.tempFilePath);
                wx.previewImage({
                  urls: [res.tempFilePath]
                });
            }
        });
    }

    /* 保存图片 */
    saveImg() {
        util.loading({ title: '保存中...' });
        let that = this;
        wx.canvasToTempFilePath({
            canvasId: 'shareCanvas',
            success: res=>{
                console.log(res.tempFilePath);
                wx.saveImageToPhotosAlbum({
                    filePath: res.tempFilePath,
                    success: function (res) {
                        wx.showModal({
                            title: '',
                            content: '成功保存到相册',
                            showCancel: false,
                            confirmText: '我知道了'
                        })
                    },
                    fail: function (msg) {
                        wx.showModal({
                            title: '保存失败',
                            content: '请重新尝试',
                            showCancel: false,
                            confirmText: '我知道了'
                        });
                    },
                    complete: function () {
                        util.loading('close');
                    }
                })
            },
            fail: function () {
                wx.showModal({
                    title: '保存失败',
                    content: '请重新尝试',
                    showCancel: false,
                    confirmText: '我知道了'
                });
                util.loading('close');
            }
        })
    }

    //绘制大背景图
    getBgImg(){
        return new Promise((resolve,reject)=>{
            wx.getImageInfo({
                //src: '../images/bg-share.png',
                src: 'https://jiayi-role.oss-cn-beijing.aliyuncs.com/share.jpg',
                success: res=>{
                  console.log(res);
                  let contex = wx.createCanvasContext('shareCanvas');
                  let imgWidth = res.width;
                  let imgHeight = res.height;
                  let width = this.screenWidth;
                  let height = (width/imgWidth)*imgHeight;
                  contex.drawImage(res.path, 0, 0, width, height);
                  contex.save();
                  this.canvasHeight = height;
                  this.setData({canvasHeight: height});
                  resolve(contex);
                  //contex.stroke();
                  //contex.draw();
                },
                fail: error=>{
                  console.log(error);
                }
            });
        });
    }

    //绘制本人图片
    getImg1(contex, imgurl, x, y, width){
        return new Promise((resolve,reject)=>{
            wx.getImageInfo({
                src: imgurl,
                success: res=> {
                  contex.save();
                  //console.log(res);
                  let imgWidth = res.width;
                  let imgHeight = res.height;
                  let height = (width/imgWidth)*imgHeight;

                  contex.beginPath(); //开始绘制剪切圆形
                  contex.arc(x+width/2, y+height/2, width/2, 0, Math.PI * 2, false);
                  //contex.stroke();//描边
                  contex.setFillStyle('white');
                  contex.fill();
                  contex.clip();//画好了圆，剪切。原始画布中剪切任意形状和尺寸。一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内，这也是要save上下文的原因
                  contex.drawImage(res.path, x, y, width, height);
                  contex.restore();//恢复之前保存的绘图上下文 恢复之前保存的绘图上下午即状态 还可以继续绘制
                  resolve(contex);
                }
            });
        });
    }

    //绘制2张图片
    getImg2(contex, imgurl, x, y, width){
        return new Promise((resolve,reject)=>{
            wx.getImageInfo({
                src: imgurl,
                success: res=>{
                  contex.save();
                  //console.log(res);
                  let imgWidth = res.width;
                  let imgHeight = res.height;
                  let height = (width/imgWidth)*imgHeight;

                  contex.beginPath(); //开始绘制剪切圆形
                  contex.arc(x+width/2, y+height/2, width/2, 0, Math.PI * 2, false);
                  //contex.setStrokeStyle('#ffffff');//描边
                  contex.setFillStyle('white');
                  contex.fill();
                  contex.clip();//画好了圆，剪切。原始画布中剪切任意形状和尺寸。一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内，这也是要save上下文的原因
                  contex.drawImage(res.path, x, y, width, height);
                  contex.restore();//恢复之前保存的绘图上下文 恢复之前保存的绘图上下午即状态 还可以继续绘制
                  resolve(contex);
                }
            });
        });
    }


    //绘制文字
    getText(contex,name1,name2,name3){
        return new Promise((resolve,reject)=>{
            //绘制本人用户名
            contex.setTextAlign('center');    // 文字居中
            contex.setFillStyle('#fff');  // 文字颜色：白色
            contex.setFontSize(14);         // 文字字号：14px
            contex.fillText(name1, this.screenWidth/2, 115);
            contex.draw(true);

            if(name3!=-1){
                //绘制第1个对比人物用户名
                contex.setTextAlign('center');    // 文字居中
                contex.setFillStyle('#fff');  // 文字颜色：黑色
                contex.setFontSize(14);         // 文字字号：22px
                contex.fillText(name2, 60, 460);
                contex.draw(true);
                
                //绘制第2个对比人物用户名
                contex.setTextAlign('center');    // 文字居中
                contex.setFillStyle('#fff');  // 文字颜色：黑色
                contex.setFontSize(14);         // 文字字号：22px
                let x = this.screenWidth - 50 - 20;
                contex.fillText(name3, x, 460);
                contex.draw(true);
              }else{
                //绘制第1个对比人物用户名
                contex.setTextAlign('center');    // 文字居中
                contex.setFillStyle('#fff');  // 文字颜色：黑色
                contex.setFontSize(14);         // 文字字号：22px
                contex.fillText(name2, this.screenWidth/2, 470);
                contex.draw(true);
              }

            util.loading('close');
            resolve(contex);
        });
    }

    onLoad(options){
        console.log(options);
        util.loading();
        //获取手机屏幕信息
        wx.getSystemInfo({
            success: systemInfo=>{
              console.log(systemInfo);
              this.screenWidth = systemInfo.screenWidth;
              this.screenHeight = systemInfo.screenHeight;
              this.setData({
                screenWidth: this.screenWidth,
                screenHeight: this.screenHeight
              });
            }
        });

        let userInfo = wx.getStorageSync('userInfo');
        let params = {
            url: 'program/rank/shareInfo',
            data: {
              uId: userInfo.uId,
              workId: options.workId,
              region: options.region,
            }
        };
        util.$http(params).then(response=>{
          util.loading();
          //console.log(response);
          if(response.statusCode==200&&response.data.code=='0000'){
            //this.userInfo = response.data.data.userInfo;
            //this.roleInfo = response.data.data.roleInfo;
            if(response.data.data.firstRoleInfo){//如果不是第一名
                this.getBgImg().then(contex=>{
                  console.log(1);
                  let imgurl = response.data.data.userInfo.avatar;
                  let x = (this.screenWidth - 60)/2;
                  return this.getImg1(contex, imgurl, x, 30, 60);
                }).then(contex=>{
                  console.log(2);
                  let imgurl = response.data.data.roleInfo[0].imageUrl;
                  return this.getImg2(contex, imgurl, 10, 320, 110);
                }).then(contex=>{
                  console.log(3);
                  let imgurl = response.data.data.firstRoleInfo.imageUrl;
                  let x = this.screenWidth - 10 - 110;
                  return this.getImg2(contex, imgurl, x, 320, 110);
                  console.log(4);
                }).then(contex=>{
                  //console.log(contex);
                  return this.getText(contex, response.data.data.userInfo.userName, response.data.data.roleInfo[0].name, response.data.data.firstRoleInfo.name);
                });
            }else{//如果是第一名
                this.getBgImg().then(contex=>{
                  //console.log(contex);
                  let imgurl = response.data.data.userInfo.avatar;
                  let x = (this.screenWidth - 60)/2;
                  return this.getImg1(contex, imgurl, x, 30, 60);
                }).then(contex=>{
                  let imgurl = response.data.data.roleInfo.imageUrl;
                  let x = (this.screenWidth - 115)/2;
                  return this.getImg1(contex, imgurl, x, 320, 115);
                }).then(contex=>{
                  console.log(123123);
                  return this.getText(contex, response.data.data.userInfo.userName, response.data.data.roleInfo.name, -1);
                });
            }
          }
        });

    }

  }
</script>
